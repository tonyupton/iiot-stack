name: iiot-stack

services:
  # Timebase Historian
  # This is the main data storage and processing engine
  timebase-historian:
    image: timebase/historian:latest
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 4096m
    hostname: timebase-historian
    container_name: timebase-historian
    ports:
      - "4511:4511"
      - "4512:4512"
    restart: unless-stopped
    volumes:
      - timebase-historian:/historian
      - ./timebase/historian:/historian/settings
    environment:
      - Settings=/historian/settings
      - Data=/historian/data
      - Logs=/historian/logs

  # Timebase Explorer
  # This is the web-based UI for Timebase
  timebase-explorer:
    image: timebase/explorer:latest
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 2048m
    hostname: timebase-explorer
    container_name: timebase-explorer
    ports:
      - "4531:4531"
      - "4532:4532"
    restart: unless-stopped
    volumes:
      - timebase-explorer:/explorer
      - ./timebase/explorer/sources.config:/explorer/config/sources.config
    environment:
      - Settings=/explorer/settings
      - Config=/explorer/config
      - Data=/explorer/data
      - Logs=/explorer/logs

  # OPC UA Collector
  # This is a collector that connects to OPC UA servers
  timebase-collector-opcua:
    image: timebase/collector:latest
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 2048m
    hostname: timebase-collector-opcua
    container_name: timebase-collector-opcua
    ports:
      - "4521:4521"
      - "4522:4522"
    restart: unless-stopped
    volumes:
      - timebase-collector-opcua:/collector
      - ./timebase/collector/opcua:/collector/config
    environment:
      - Active=false
      - Settings=/collector/settings
      - Config=/collector/config
      - Data=/collector/data
      - Logs=/collector/logs

  # MQTT Collector
  # This is a collector that connects to MQTT brokers
  timebase-collector-mqtt:
    image: timebase/collector:latest
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 2048m
    hostname: timebase-collector-mqtt
    container_name: timebase-collector-mqtt
    ports:
      - "4523:4521"
      - "4524:4522"
    restart: unless-stopped
    volumes:
      - timebase-collector-mqtt:/collector
      - ./timebase/collector/mqtt:/collector/config
    environment:
      - Active=false
      - Settings=/collector/settings
      - Config=/collector/config
      - Data=/collector/data
      - Logs=/collector/logs

  # Sparkplug B Collector
  # This is a collector that connects to Sparkplug B brokers
  timebase-collector-sparkplugb:
    image: timebase/collector:latest
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 2048m
    hostname: timebase-collector-sparkplugb
    container_name: timebase-collector-sparkplugb
    ports:
      - "4525:4521"
      - "4526:4522"
    restart: unless-stopped
    volumes:
      - timebase-collector-sparkplugb:/collector
      - ./timebase/collector/sparkplugb:/collector/config
    environment:
      - Active=false
      - Settings=/collector/settings
      - Config=/collector/config
      - Data=/collector/data
      - Logs=/collector/logs

  # Simulator Collector
  # This is a collector that simulates data sources
  timebase-collector-simulator:
    image: timebase/collector:latest
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 2048m
    hostname: timebase-collector-simulator
    container_name: timebase-collector-simulator
    ports:
      - "4527:4521"
      - "4528:4522"
    restart: unless-stopped
    volumes:
      - timebase-collector-simulator:/collector
      - ./timebase/collector/simulator:/collector/config
    environment:
      - Active=false
      - Settings=/collector/settings
      - Config=/collector/config
      - Data=/collector/data
      - Logs=/collector/logs

  # Ignition
  # This is the main Ignition server
  # It is used for SCADA and HMI applications
  ignition:
    image: inductiveautomation/ignition:latest
    hostname: ignition
    container_name: ignition
    ports:
      - 8088:8088
      - 8043:8043
      - 8060:8060
      - 62541:62541
    volumes:
      - ignition:/usr/local/bin/ignition/data
    # env_file: ignition.env  # optionally specify variables in a file, or using `environment:` below
    environment:
      - ACCEPT_IGNITION_EULA=Y
      - GATEWAY_ADMIN_USERNAME=admin
      - GATEWAY_ADMIN_PASSWORD=password
      - IGNITION_EDITION=standard
      - TZ=America/New_York # see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List
    command: >
      -n ignition -m 1024 -- wrapper.java.maxmemory=4096 wrapper.java.initmemory=512 -Dignition.allowunsignedmodules=true
    restart: unless-stopped

  # HiveMQ
  # This is an MQTT broker
  hivemq:
    image: hivemq/hivemq4:latest
    hostname: hivemq
    container_name: hivemq
    ports:
      - "8080:8080" # Web UI
      - "8000:8000" # WebSocket MQTT
      - "1883:1883" # MQTT broker
    ulimits:
      nofile:
        soft: 500000
        hard: 500000
    volumes:
      - hivemq:/opt/hivemq/data # Persistent storage for HiveMQ
    restart: unless-stopped

  # Node-RED
  # This is a flow-based programming tool for IoT
  # It is used for wiring together hardware devices, APIs, and online services
  node-red:
    image: nodered/node-red
    hostname: node-red
    container_name: node-red
    ports:
      - "1880:1880" # Node-RED Web UI
    depends_on:
      - hivemq
    volumes:
      - node_red:/data # Persistent storage for Node-RED flows
    restart: unless-stopped

  # PostgreSQL
  # This is a relational database used for storing data
  # It is used for storing historical data and other structured data
  postgres:
    image: postgres:latest
    hostname: postgres
    container_name: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: iiot_data
    ports:
      - "5432:5432"
    volumes:
      - postgres:/var/lib/postgresql/data # Persistent storage
    restart: unless-stopped

  # pgAdmin
  # This is a web-based database management tool for PostgreSQL
  # It is used for managing PostgreSQL databases
  pgadmin:
    image: dpage/pgadmin4
    hostname: pgadmin
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@pgadmin.com
      PGADMIN_DEFAULT_PASSWORD: securepassword123
    ports:
      - "5080:80" # Access pgAdmin at http://localhost:5080
    depends_on:
      - postgres
    volumes:
      - pgadmin:/var/lib/pgadmin # Persistent storage for pgAdmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json # Predefined server connections
      - ./pgadmin/pgpass:/var/lib/pgadmin/.pgpass # Predefined password file for pgAdmin
    restart: unless-stopped

volumes:
  timebase-historian:
  timebase-explorer:
  timebase-collector-opcua:
  timebase-collector-mqtt:
  timebase-collector-sparkplugb:
  timebase-collector-simulator:
  ignition:
  hivemq:
  node_red:
  postgres:
  pgadmin:
